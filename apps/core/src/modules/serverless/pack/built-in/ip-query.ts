import type { BuiltInFunctionObject } from '../../function.types'

const ipQueryFnCode =
  "import { isIPv4, isIPv6 } from 'net';\nimport { URLSearchParams } from 'url';\n\nconst TIMEOUT = 5000;\n\nexport default async function handler(ctx: Context, timeout = TIMEOUT) {\n  const { ip } = ctx.query;\n  if (!ip) { ctx.throws(422, 'ip is empty'); }\n  const cache = ctx.storage.cache;\n  const hasCatch = await cache.get(ip);\n\n  if (hasCatch) {\n    const cachedData = typeof hasCatch === 'string' ? JSON.parse(hasCatch) : hasCatch;\n    return cachedData;\n  }\n\n  const result = await getIp(ctx, ip);\n  await cache.set(ip, JSON.stringify(result));\n  return result;\n}\n\nasync function getIp(ctx: Context, ip: string, timeout = TIMEOUT) {\n  const isV4 = isIPv4(ip);\n  const isV6 = isIPv6(ip);\n  const { axios } = await ctx.getService('http');\n\n  if (!isV4 && !isV6) {\n    ctx.throws(422, 'Invalid IP');\n  }\n\n  try {\n    let responseData;\n\n    if (isV4) {\n      const response = await axios.get(\n        `http://ip-api.com/json/${ip}?lang=zh-CN`,\n        {\n          timeout,\n        },\n      );\n      responseData = response.data;\n    } else {\n      const response = await axios.get(\n        `http://ip-api.com/json/${ip}?lang=zh-CN`,\n        {\n          timeout,\n        },\n      );\n      responseData = response.data;\n    }\n\n    const {\n      country,\n      countryCode,\n      region,\n      regionName,\n      city,\n      isp,\n      org,\n      as,\n      query,\n    } = responseData;\n\n    const result = {\n      cityName: city,\n      countryName: country,\n      regionName: regionName,\n      ip: query,\n      ispDomain: isp,\n      ownerDomain: isp || org,\n    };\n\n    return result;\n  } catch (e) {\n    ctx.throws(500, `IP API 调用失败，${e.message}`);\n  }\n}\n\ninterface IPResponseData {\n  code: number;\n  success: boolean;\n  message: string;\n  data: Data;\n  location: string;\n  myip: string;\n  time: string;\n}\ninterface Data {\n  ip: string;\n  dec: string;\n  country: string;\n  countryCode: string;\n  province: string;\n  city: string;\n  districts: string;\n  idc: string;\n  isp: string;\n  net: string;\n  protocol: string;\n  begin: string;\n  end: string;\n}"

// eslint-disable-next-line import/no-default-export
export default {
  code: ipQueryFnCode,
  path: 'ip',
  name: 'ip-query',
  method: 'GET',
} as BuiltInFunctionObject
