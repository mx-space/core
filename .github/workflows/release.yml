on:
  push:
    tags:
      - 'v*'

name: Release (core)

jobs:
  build:
    name: Main Build
    runs-on: ubuntu-22.04
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@v1.10.0
        with:
          mongodb-version: 4.4
      - name: Start Redis
        uses: supercharge/redis-github-action@1.8.0
        with:
          redis-version: 6
      - name: Cache pnpm modules
        uses: actions/cache@v4
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - uses: pnpm/action-setup@v2.4.0
        with:
          version: 8.x
          run_install: false
      - name: Install Dependencies
        run: |
          pnpm i
      - name: Test
        working-directory: ./apps/core
        timeout-minutes: 10
        run: |
          npm run lint
          npm run test

      - name: Build project
        run: |
          pnpm run bundle
      - name: Test Bundle Server
        run: |
          bash scripts/workflow/test-server.sh
      - name: Zip Assets
        run: |
          sh apps/core/zip-asset.sh
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - run: npx changelogithub
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release-linux.zip
          asset_content_type: application/zip
  deploy:
    name: Deploy To Remote Server
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV

      - uses: robinraju/release-downloader@v1.8
        name: Download release
        with:
          # The github tag. e.g: v1.0.1
          # Download assets from a specific tag/version
          tag: ${{ env.TAG_NAME }}
          fileName: 'release-linux.zip'
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          # port: ${{ secrets.PORT }}
          source: 'release-linux.zip'
          target: '/tmp/mx-core'

      - name: Exec deploy script with SSH
        uses: appleboy/ssh-action@master
        env:
          JWTSECRET: ${{ secrets.JWTSECRET }}
          MX_ENCRYPT_KEY: ${{ secrets.MX_ENCRYPT_KEY }}
        with:
          command_timeout: 5m
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          envs: JWTSECRET,MX_ENCRYPT_KEY
          script_stop: true
          script: |
            whoami
            cd
            source ~/.zshrc
            cd mx
            ls -a
            node server-deploy.js --jwtSecret=$JWTSECRET --encrypt_key=$MX_ENCRYPT_KEY --encrypt_enable --scp_path=/tmp/mx-core/release-linux.zip

  build_other_platform:
    name: Build Other Platform
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache pnpm modules
        uses: actions/cache@v4
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - uses: pnpm/action-setup@v2.4.0
        with:
          version: 8.x
          run_install: true
      - name: Build project
        run: |
          pnpm run bundle
      - name: Zip Assets
        run: |
          sh apps/core/zip-asset.sh
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build.outputs.release_url }}
          asset_path: ./release.zip
          asset_name: release-${{ matrix.os }}.zip
          asset_content_type: application/zip
  docker:
    name: Docker Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            innei/mx-server
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Copy .env
        run: |
          cp .env.example .env
      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }},innei/mx-server:latest
          labels: ${{ steps.meta.outputs.labels }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test
        run: |
          bash ./scripts/workflow/test-docker.sh
          sudo rm -rf ./data
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }},innei/mx-server:latest
          labels: ${{ steps.meta.outputs.labels }}
